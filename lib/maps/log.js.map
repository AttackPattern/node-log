{"version":3,"sources":["log.js"],"names":["_cleanStack","_interopRequireDefault","require","appStart","Date","Log","Bus","extension","LogActivity","this","bus","with","subject","note","name","section","enter","subscription","subscribe","publisher","_classCallCheck","_defineProperty","error","complete","Error","start","entries","entry","method","startTime","time","exiting","stopTime","publish","LogEntry","_objectSpread","extensions","arguments","length","undefined","concat","trim","entering","exit","e","publishEntry","copy","push","_this","message","Object","_this$error","default","stack","Math","max","addNote","callback","condition","_this2","sub","payload","subscriptions","unsubscribe","filter","next","forEach"],"mappings":"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","file":"../log.js","sourcesContent":["import stack from 'clean-stack';\n\nconst appStart = new Date();\n\nexport default class Log {\n  bus = new Bus();\n\n  with(extension) {\n    return new LogActivity(this.bus).with(extension);\n  }\n  note(subject) {\n    return new LogActivity(this.bus).note(subject);\n  }\n  enter(name, section) {\n    return new LogActivity(this.bus).enter(name, section);\n  }\n  subscribe(subscription) {\n    return this.bus.subscribe(subscription);\n  }\n}\n\nclass LogActivity {\n  extensions = {}\n  entries = []\n\n  constructor(publisher) {\n    this.publisher = publisher;\n  }\n\n  exit(error) {\n    if (this.complete) {\n      throw new Error('Exiting an unentered activity');\n    }\n    this.complete = true;\n    const start = this.entries[0];\n    const entry = new LogEntry(error || 'exiting activity', start.method);\n    entry.entries = this.entries;\n    entry.startTime = start.time;\n    entry.exiting = true;\n    entry.stopTime = new Date();\n\n    this.publish(entry);\n  }\n\n  note(subject) {\n    if (this.complete) {\n      throw new Error('Note called on a completed activity');\n    }\n    const note = new LogEntry(subject);\n    return this.publish({\n      ...note,\n      ...this.extensions\n    });\n  }\n\n  with(extension) {\n    if (extension) {\n      this.extensions = {\n        ...this.extensions,\n        ...extension\n      };\n    }\n    return this;\n  }\n\n  enter(name = '', section) {\n    this.name = name;\n    const entry = new LogEntry(`entering activity ${this.name}`.trim());\n    entry.entering = true;\n    this.publish(entry);\n\n    if (!section) {\n      this.enter = undefined;\n      return this;\n    }\n\n    try {\n      section(this);\n      this.exit();\n    }\n    catch (e) {\n      this.exit(e);\n      throw e;\n    }\n    return null;\n  }\n\n  publish(entry) {\n    let publishEntry = {\n      ...entry.copy(),\n      ...this.extensions\n    };\n    this.entries.push(publishEntry);\n    this.publisher.publish(publishEntry);\n    return entry;\n  }\n}\n\nclass LogEntry {\n  constructor(subject) {\n    this.time = new Date();\n    this.addNote(subject);\n  }\n\n  addNote = note => {\n    if (!note) {\n      return;\n    }\n    if (typeof note === 'string') {\n      this.message = note;\n    }\n    else if (note instanceof Error) {\n      this.error = note;\n    }\n    else {\n      Object.assign(this, note);\n    }\n  }\n\n  stack = () => {\n    return stack(this.error?.stack);\n  }\n\n  copy = () => ({\n    ...new LogEntry(null),\n    ...this\n  })\n  appStart = () => appStart\n  appElapsed = () => this.time - appStart\n  elapsed = () => Math.max(0, this.time - this.startTime)\n}\n\nclass Bus {\n  subscriptions = []\n  subscribe(callback) {\n    return this.when().subscribe(callback);\n  }\n  when(condition) {\n    return {\n      subscribe: callback => {\n        function sub(payload) {\n          if (!condition || condition(payload)) {\n            callback(payload);\n          }\n        }\n        this.subscriptions.push(sub);\n\n        return {\n          unsubscribe: () => {\n            this.subscriptions = this.subscriptions.filter(next => next !== sub);\n          }\n        };\n      }\n    };\n  }\n  publish(subject) {\n    this.subscriptions.forEach(sub => {\n      try {\n        sub(subject);\n      }\n      catch (e) {\n        // Honey badger\n      }\n    });\n  }\n}\n"]}